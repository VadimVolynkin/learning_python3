https://webdevblog.ru/chto-takoe-metaklassy-v-python/
https://webdevblog.ru/kogda-ispolzovat-metaklassy-v-python-5-interesnyh-variantov-ispolzovaniya/

# ===========================================================================================
# МЕТАКЛАССЫ
# ===========================================================================================
Любой класс, экземпляры которого являются классами, является метаклассом.
Метакласс – это объект, который знает, как создавать классы и управлять ими.
Одно из основных применений метаклассов - проверка и сбор информации об определениях классов.
Метаклассы могут менять поведение классов. 


# ===== Как создать метакласс
По умолчанию все классы создаются с использованием метакласса type(). МетаКласс type тоже создается с использованием type.
Тело класса выполняется в новом пространстве имен, а имя класса локально привязано к результату выполнения: 

type(name, bases, attrs)
# name:  имя класса
# bases: кортеж родительского класса (для экземпляра, может быть пустым)
# attrs: словарь, содержащий имена и значения атрибутов

# создание метакласса вариант 1
type('MyClass', (), {})              # returns a class object

# создание метакласса вариант 2
class MyClass(type):
    pass


Когда выполняется определение класса, происходят следующие шаги:
- разрешаются записи MRO
- определяется соответствующий метакласс
- подготавливается пространство имен класса
- выполняется тело класса
- создается объект класса


# ===== Где используют метаклассы?
Метакласс чаще всего используется в качестве фабрики классов, а вообще возможности шире:

- перечисление,
- ведение журнала,
- проверка интерфейса,
- автоматическое делегирование,
- автоматическое создание свойств,
- прокси,
- фреймворки,
- автоматическая блокировка/синхронизация ресурсов.


Если не требуется сложные изменения класса, метаклассы использовать не стоит. Просто изменить класс можно двумя способами:
- руками
- декораторами класса





---------------------

Основная цель метакласса — автоматически изменять класс при его создании. Метаклассы
    перехватывают создание класса
    изменяют класс
    возвращают измененный класс






class UpperAttrMetaclass(type):
    def __new__(cls, clsname, bases, attrs):
        uppercase_attrs = {
            attr if attr.startswith("__") else attr.upper(): v
            for attr, v in attrs.items()
        }
        return super(UpperAttrMetaclass, cls).__new__(
            cls, clsname, bases, uppercase_attrs)






Метакласс может наследоваться от метакласса, переопределять родительские методы. Метаклассы могут даже использовать другие метаклассы.

Основной вариант использования метакласса — создание API. Типичным примером этого является Django ORM.
ABC, это еще одна вещь, которая реализована с использованием метаклассов.





начиная с Python3.6, есть еще один доступный хук: __init_subclass__. Он может заменить большинство (если не все) метаклассы.











