# ================================================================================================================
# МИКСИНЫ
# ================================================================================================================
Mixin — это класс, который предоставляет методы другим несвязным классам через множественное наледование, но не считается базовым классом. Миксины похожи на композицию, но они создают более прочные отношения.
Миксины не предназначены для создания собственных экземпляров.
Желательно, чтобы миксины не были потомками или родителями других миксинов, а также не имели состояния.
Важно учитывать порядок разрешения методов mro.


# ================================================================================================================
# ПРИМЕР
# ================================================================================================================


# класс создает объекты, которые хранят координаты
class Entity:
    def __init__(self, pos_x, pos_y):
        self.pos_x = pos_x
        self.pos_y = pos_y

# миксин содержит методы для вычисления периметра и площади квадрата
# миксин не имеет состояния
class SquareMixin:
    def add_size(self, size_x):
        self.size_x = size_x
        self.size_y = size_x

    def perimeter(self):
        return self.size_x * 4

    def square(self):
        return self.size_x * self.size_x


# Класс наследуется от базового класса + Миксинн
# Теперь он может хранить координаты и может принять размеры квадрата и вычислить его площадь и периметр
# Использование миксина избавляет класс Entity от ненужных методов, позволяя использовать его в создании других фигур.
class SquareEntity(SquareMixin, Entity):
    pass


# создаем объект квадрата в точке
square = SquareEntity(5, 4)

# добавляем его размер
square.add_size(500)
square.size_x                     # 500
square.size_y                     # 500

# вычисляем периметр и площадь
square.square()                   # 250000
square.perimeter()                # 2000





Используйте наследование вместо композиции для предоставления функций смешивания (mixin) нескольким несвязанным классам, когда может существовать только одна реализация этой функции.



https://webdevblog.ru/nasledovanie-i-kompoziciya-rukovodstvo-po-oop-python/



















