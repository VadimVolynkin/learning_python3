# ======================================================================================================
# ВИРТУАЛЬНЫЕ ОКРУЖЕНИЯ
# ======================================================================================================
# Это изолированное пространство, в котором мы устанавливаем нужные для конкретного проекта версии питона и библиотеки.
# Это позволяет избежать конфликтов между разными версиями.



# ======================================================================================================
# PIPENV
# ======================================================================================================
# Отличный инструмент для управления вирт. окруженим.

# ===== УСТАНОВКА PIPENV ===============================================================================
# если pip не установлен - сначала установите его
pip install pipenv

# ===== ПЕРВОНАЧАЛЬНАЯ НАСТРОЙКА PIPENV: установка папки для создания папки env с виртуальным окружением
# По умолчанию pipenv создает папку .venv с вирт.окружением в какой то из директорий линукса - это неудобно.
# Лучше назначить другое место - папку самого проекта, чтобы все было в одном месте.
# делается это прописыванием переменной окружения:

# открываем файл
~/.profile или ~/.bashrc

# добавляем эту строку и сохраняем
export PIPENV_VENV_IN_PROJECT=1


# ===== ПОПУЛЯРНЫЕ КОМАНДЫ ==============================================================================
pipenv install --three          # установит питон 3
pipenv --python 3.8.5           # установит конкретную версию


# При наличии файла .env команды $ pipenv shell и $ pipenv run, автоматически подгрузят из него переменные окружения.
pipenv shell                    #
pipenv run
                   

deactivate

exit

pipenv install django

pipenv install Flask==1.0.2

pipenv uninstall Flask

pipenv install -e git+https://github.com/requests/requests.git#egg=requests

pipenv install pytest --dev              // установить в dev

pipenv install --dev                         // установить все пакеты, включая пакеты среды разработки

pipenv lock                                     // блокировать среду, создаст/обновит файл Pipfile.lock

Другое

pip freeze                                       // покажет все версии из активного окружения

pipenv graph                                  // покажет граф зависимостей

pipenv check                                  // проверит на наличие уязвимостей

pipenv --venv                                  // по какому пути находится виртуальная среда

pipenv --where                                // по какому пути находится ваш проект

pipenv install -r dev-requirements.txt --dev            // добавит в Pipfile --dev из dev-requirements.txt

pipenv lock -r -d > dev-requirements.txt                 // сгенерирует dev-requirements.txt из Pipfile --dev

Развертывание приложения

pipenv install --system                    // устанавливать зависимости в родительскую систему

pipenv install --deploy

Dockerfile для работы с pipenv           

FROM python:3.7

RUN pip3 install pipenv

WORKDIR /usr/src/app

COPY Pipfile ./
COPY Pipfile.lock ./

RUN set -ex && pipenv install --deploy --system

COPY . .

Перенос в рабочую среду

pipenv lock

перенос файлов

pipenv shell                                    // создаст собственную среду окружения

pipenv install                                  // Если в файле Pipfile не указывается точная версия, команда install устанавливает последние версии зависимостей из Pipfile

pipenv install --ignore-pipfile          // установка всех зависимостей. —ignore-pipfile игнорирует Pipfile для установки и использует то, что находится в Pipfile.lock в момент блокировки.



# ======================================================================================================
# ВИРТУАЛЬНЫЕ ОКРУЖЕНИЯ
# ======================================================================================================
$ python3 -m venv env   env/bin/activate
(env)$ pip install -r requirements.txt
(env)$ python manage.py makemigrations
(env)$ python manage.py migrate
(env)$ python manage.py runserve






