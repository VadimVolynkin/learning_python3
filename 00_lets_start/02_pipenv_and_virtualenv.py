# ======================================================================================================
# ВИРТУАЛЬНЫЕ ОКРУЖЕНИЯ
# ======================================================================================================
# Это изолированное пространство, в котором мы устанавливаем нужные для конкретного проекта версии питона и библиотеки.
# Это позволяет избежать конфликтов между разными версиями.


# ======================================================================================================
# PIPENV
# ======================================================================================================
# Отличный инструмент для управления вирт. окруженим.


# ===== УСТАНОВКА PIPENV ===============================================================================
# если pip не установлен - сначала установите его
pip install pipenv

# ===== ПЕРВОНАЧАЛЬНАЯ НАСТРОЙКА PIPENV: установка папки для создания папки env с виртуальным окружением
# По умолчанию pipenv создает папку .venv с вирт.окружением в какой то из директорий линукса - это неудобно.
# Лучше назначить другое место - папку самого проекта, чтобы все было в одном месте.
# делается это прописыванием переменной окружения:

# открываем файл
~/.profile или ~/.bashrc

# добавляем эту строку и сохраняем
export PIPENV_VENV_IN_PROJECT=1


# ===== ПОПУЛЯРНЫЕ КОМАНДЫ ==============================================================================
pipenv install --three              # установит питон 3
pipenv --python 3.8.5               # установит конкретную версию


# При наличии файла .env команды $ pipenv shell и $ pipenv run, автоматически подгрузят из него переменные окружения.
pipenv shell                        # создает среду по умолчанию или активирует имеющуюся
deactivate                          # деактивирует активную среду

pip freeze                                     # покажет все версии из активного окружения
pipenv lock                                    # блокировать среду, создаст/обновит файл Pipfile.lock
pip freeze > requirements.txt                  # создаст или обновит requirements.txt
pipenv lock -r -d > dev-requirements.txt       # сгенерирует dev-requirements.txt из Pipfile --dev
pipenv install -r dev-requirements.txt --dev   # добавит в Pipfile --dev из dev-requirements.txt

pipenv install                      # установит все основные пакеты из Pipfile в текущей директории
pipenv install -r requirements.txt  # установит все пакеты из requirements.txt
pipenv install --system             # --system устанавливать зависимости в родительскую систему
pipenv install --deploy             # --deploy выдаст ошибку, если Pipfile.lock устарел или версия Python не соответсвует указанной
pipenv install --ignore-pipfile     # установка всех зависимостей. —ignore-pipfile игнорирует Pipfile и использует Pipfile.lock

pipenv install ipython --dev        # установить в dev
pipenv install --dev                # установить все основные пакеты + пакеты --dev из файла Pipenv

pipenv install Flask==1.0.2         # установка пакета
pipenv uninstall Flask              # удаление пакета
pipenv install -e git+https://github.com/requests/requests.git#egg=requests

pipenv graph                        # граф зависимостей
pipenv check                        # проверит на наличие уязвимостей
pipenv --venv                       # путь к виртуальной среде
pipenv --where                      # путь к проекту

# ======================================================================================================
# Dockerfile для работы с pipenv 
# ======================================================================================================
FROM python:3.7

RUN pip3 install pipenv

WORKDIR /usr/src/app

COPY Pipfile* ./

# --system устанавливать зависимости в родительскую систему
# --deploy выдаст ошибку, если Pipfile.lock устарел или версия Python не соответсвует указанной
RUN set -ex && pipenv install --deploy --system

COPY . .


# ======================================================================================================
# VIRTUALENV
# ======================================================================================================
pip install virtualenv           # установка

python3 -m venv env              # создаст среду env
source env/bin/activate          # активирует среду
deactivate                       # деактивирует среду

mkvirtualenv my-new-project      # создаст и активирует среду


# ======================================================================================================
# Встроенный пакет для работы с вирт средой
# ======================================================================================================
sudo apt install python3-venv

python3 -m venv venv

venv/bin/activate
deactivate



