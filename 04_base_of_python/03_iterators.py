
Итератор - объект, который может перебирать(множества, списки, кортежи, словари, строки и тп). Он неявно реализован в for, comprehension’ах и генераторах Python.

Итератор выдает следующий элемент при вызове __next__() или выдает исключение StopIteration, если объектов больше нет. Дойдя до конца последовательности, итератор не может вернуться в начало и перебрать еще раз.

Преимущество итератора перед списками - экономия памяти при переборе больших последовательностей - в памяти всегда только 1 элемент. 

# ===============================================================================================================
# ПРЕОБРАЗОВАНИЕ СПИСКА И КОРТЕЖА В ИТЕРАТОР 
# ===============================================================================================================
Функции iter() и next() образуют протокол итератора:
- iter() - вызывает метод __iter__() преобразуюет последовательность в объект-итератор с методом __next__()
- next() - вызывает метод __next__() внутри итератора, который в конце перебора генерит StopIteration для выхода из процесса итерации. 

# пример преобразования списка и кортежа в итератор
a = [1,2,3]
b = (1,2,3)
it_list = iter(a)          # преобразование списка в объект-итератор 
it_tuple = iter(b)         # преобразование кортежа в объект-итератор 
print(type(it_list))       # <class 'list_iterator'>
print(type(it_tuple))      # <class 'tuple_iterator'>

print(next(it_list))       # 1
print(next(it_list))       # 2

print(dir(it_list))
['__class__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__length_hint__', '__lt__', '__ne__', '__new__', '__next__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__setstate__', '__sizeof__', '__str__', '__subclasshook__']

# ===============================================================================================================
# СОЗДАНИЕ СВОЕГО КЛАССА ИТЕРАТОРА 
# ===============================================================================================================
# Объект этого класса будет итератором. Он сможет производить ограниченное количество итераций.
 
class MyIter:
    def __init__(self, limit):
        self.__counter = 0                 # счетчик итераций
        self.__limit = limit               # лимит

    def __iter__(self):                    # возвращает себя - экземпляр класса
        return self

    def __next__(self):                    # метод производит итерацию
        if self.__counter >= self.__limit: # если лимит превышен - генерируем выход из итерации
            raise StopIteration            

        self.__counter += 1                # если не превышен лимит, то увеличим счетчик
        return self.__counter              # покажем счетчик


# создаем экземпляр итератора
it = MyIter(3)
print(next(it))                            # 1
print(next(it))                            # 2
print(next(it))                            # 3
print(next(it))                            # StopIteration































