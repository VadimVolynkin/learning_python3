# https://pythonworld.ru/tipy-dannyx-v-python/isklyucheniya-v-python-konstrukciya-try-except-dlya-obrabotki-isklyuchenij.html

https://www.youtube.com/watch?v=89wpfOAgrCk
"""
Конструкция try - except нужна для того, чтобы при возникновения исключения программа не падала, а продолжала работать и правильно обрабатывала исключения.
Если конструкция определена в функции, то может что то возвращать из ее блоков через return.
Собственные классы исключений наследуются от Exception или его потомков.
Обработка Exception должна происходить только на самом верхнем уровне типа if name == __main__, в остальных случаях нужно обрабатывать конкретное исключение.

=== try
Блок с кодом, который может породить исключение.
В блоке можно использовать проверки типа assert.

=== except
Блок срабатывает, если возникает любое исключение.
Если все штатно - блок except не выполняется.

1. Если обработка возникшего исключения не описана - то такое исключение поднимается на уровень выше. Самый верхний уровень - уровень интерпретатора. unhandled exception - необработанные исключения, они отображаюся в консоли. Программа завершается аварийно.

2. Пустой except перехватывает любые исключения. Он должен находиться в самом конце после всех определенных except.
Пустой except практически не используется, а используется except Exception.

3. Если обаботка исключения описана - выполняется блок с этим исключением. При этом перехватываются как само исключение, так и его потомки.
Программа продолжает работать.

=== except ValueError as v
v - некая переменная для хранения сообщения об ошибке.

=== else
Выполняется если блок try выполнен штатно.
Блок необязателен.

=== finally
Выполняется всегда.
Блок необязателен.

=== raise MyException("Несоответствующее значение")
Ключевое слово raise - инструкция к созданию собственного исключения.
Пустой raise вызовет исключение, которое произошло. Можно использовать только в блоке except.

"""
x = 1
y = 2

try:
    res = x/y
except ZeroDivisionError:                         # будем ловить деление на ноль
    res = "Деление на ноль"
except ValueError as v:
    print(v)
    res = v
except:
    print('Произошло какое-то исключение')        # такое исключение не обрабатывается - переходит на уровень выше.
    res = 'something went wrong...'
else:
    print("Исключений не произошло")
finally:
    print("Блок finally выполняется всегда")

print(res)


# ===== Exception =========================================================================
# отлавливает ошибки в main() на верхнем уровне, которые не были отловлены в коде

def main():

    try:
        f1()
    except SomeError:
        log.error('rfhjjfbrhfbrhbfhrtf')
        raise                                 # raise прокинет исключение на уровент выше
    try:
        f2()
    except SomeError2:
        pass



if __name__ == "__main__":
    try:
        main()
    except Exception:
        log.error(...)
        mail(...)
        print('something went wrong')



# ===== СОБСТВЕННЫЙ КЛАСС ИСКЛЮЧЕНИЙ ======================================================
class MyException(Exception):
    pass

class DeviceError(Exception):
    def __init__(self,errno,msg):
        self.args = (errno, msg)    # Этот атрибут используется при выводе трассировочной информации.
        self.errno = errno
        self.errmsg = msg

# Возбудить исключение (передав несколько аргументов)
raise DeviceError(1, ‘Нет ответа’)


# ===== СТАНДАРТНЫЕ ИСКЛЮЧЕНИЯ ПИТОНА =====================================================

BaseException                    # базовое исключение, от него берут начало все остальные
    SystemExit                   # порождается функцией sys.exit при выходе из программы
    KeyboardInterrupt            # при прерывании программы пользователем (обычно сочетанием клавиш Ctrl+C)
    GeneratorExit                # порождается при вызове метода close объекта generator
    Exception                    # здесь начинаются обыкновенные исключения (не системные), с которыми можно работать
        StopIteration            # порождается функцией next, если в итераторе больше нет элементов
        ArithmeticError          # арифметическая ошибка.
            FloatingPointError   # порождается при операции с плавающей запятой
            OverflowError        # результат арифметической операции слишком велик для представления. Не появляется при обычной работе с целыми числами (так как python поддерживает длинные числа), но может возникать в некоторых других случаях
            ZeroDivisionError    # деление на ноль
        AssertionError           # выражение в функции assert ложно
        AttributeError           # объект не имеет данного атрибута (значения или метода)
        BufferError              # операция, связанная с буфером, не может быть выполнена
        EOFError                 # функция наткнулась на конец файла и не смогла прочитать то, что хотела
        ImportError              # не удалось импортирование модуля или его атрибута
        LookupError              # некорректный индекс или ключ
            IndexError           # индекс не входит в диапазон элементов
            KeyError             # несуществующий ключ (в словаре, множестве или другом объекте)
        MemoryError              # недостаточно памяти
        NameError                # не найдено переменной с таким именем
            UnboundLocalError    # сделана ссылка на локальную переменную в функции, но переменная не определена ранее
        OSError                  # ошибка, связанная с системой
            BlockingIOError
            ChildProcessError    # неудача при операции с дочерним процессом
            ConnectionError      # базовый класс для исключений, связанных с подключениями
                BrokenPipeError
                ConnectionAbortedError
                ConnectionRefusedError
                ConnectionResetError
            FileExistsError      # попытка создания файла или директории, которая уже существует
            FileNotFoundError    # файл или директория не существует
            InterruptedError     # системный вызов прерван входящим сигналом
            IsADirectoryError    # ожидался файл, но это директория
            NotADirectoryError   # ожидалась директория, но это файл
            PermissionError      # не хватает прав доступа
            ProcessLookupError   # указанного процесса не существует
            TimeoutError         # закончилось время ожидания
        ReferenceError           # попытка доступа к атрибуту со слабой ссылкой
        RuntimeError             # исключение не попадает ни под одну из других категорий
        NotImplementedError      # абстрактные методы класса требуют переопределения в дочерних классах
        SyntaxError              # синтаксическая ошибка
            IndentationError     # неправильные отступы
                TabError         # смешивание в отступах табуляции и пробелов
        SystemError              # внутренняя ошибка
        TypeError                # операция применена к объекту несоответствующего типа
        ValueError               # функция получает аргумент правильного типа, но некорректного значения
        UnicodeError             # ошибка, связанная с кодированием / раскодированием unicode в строках
            UnicodeEncodeError   # исключение, связанное с кодированием unicode
            UnicodeDecodeError   # исключение, связанное с декодированием unicode
            UnicodeTranslateError# исключение, связанное с переводом unicode
        Warning                  # предупреждение





