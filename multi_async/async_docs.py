"""
# ===== Асинхронность(кооперативная многозадачность) =====================================================
Асинхроннсть нужно использовать там где много задач с долгим i/o (запросы в базу, кеш, внешний API и тп). Часто используется в нагруженных сервисах.
==================================================================================================================

Асинхронность позволяет не блокировать поток выполнения, при этом задачи запускаются последовательно не дожидаясь их полного выполнения(получения ответа от удаленного сервера и тп).

Асинхронность работает в рамках 1 процесса и 1 потока. Можно запустить несколько процессов, у каждого будет свой поток с асинхронным кодом.

# ===== Как работает асинхронность в Питоне? =============================================================
=== Цикл событий Event Loop
Он управляет задачами, остлеживает callback и выполняет его, когда задача готова(данные получены).

=== Задачи(Tasks)
Задачи ожидают своего завершения(получения данных), но в асинхроне они поток не блокируют, позволяя Циклу работать с другими задачами.
Когда задачи завершаются(данные пришли), возникает callback.
"""