# ================================================================================================================
# ITERATOR
# ================================================================================================================
Поведенческий паттерн
Существуют экзотические коллекции, построенные на основе деревьев, графов и других сложных структур данных. Паттерн позволяет последовательно обходить сложную коллекцию без раскрытия деталей её реализации.

Клиент может обходить разные коллекции одним и тем же способом, используя единый интерфейс итераторов.

Можно часто встретить в Python-коде, особенно в программах, работающих с разными типами коллекций, и где требуется обход разных сущностей.

# ===== Когда применять 
Когда есть сложная структура данных и нужно скрыть от клиента детали её реализации (из-за сложности или вопросов безопасности).

Когда нужно иметь несколько вариантов обхода одной и той же структуры данных.

Когда нужно иметь единый интерфейс обхода различных структур данных.


# ===== Как создать 
Для создания итератора в Python есть 2 абстрактных класса в collections: Iterable, Iterator. 
Нужно реализовать метод __iter__() в итерируемом объекте (списке) и метод __next__() в итераторе.



# ================================================================================================================
# Концептуальный пример
# ================================================================================================================
from __future__ import annotations
from collections.abc import Iterable, Iterator
from typing import Any, List


# Конкретный Итератор реализует различные алгоритмы обхода и хранит текущее положение обхода.
# У итератора может быть множество несколько полей для хранения состояния итерации, особенно когда он должен работать с определённым типом коллекции.
class AlphabeticalOrderIterator(Iterator):
  
    # хранит текущее положение обхода
    _position: int = None

    # указывает направление обхода
    _reverse: bool = False

    def __init__(self, collection: WordsCollection, reverse: bool = False) -> None:
        self._collection = collection
        self._reverse = reverse
        self._position = -1 if reverse else 0

    # должен вернуть следующий элемент в последовательности
    # При достижении конца коллекции должно вызываться исключение StopIteration.
    def __next__(self):
        try:
            value = self._collection[self._position]
            self._position += -1 if self._reverse else 1
        except IndexError:
            raise StopIteration()

        return value



# Конкретные Коллекции предоставляют один или несколько методов для получения новых экземпляров итератора, совместимых с классом коллекции
class WordsCollection(Iterable):
    def __init__(self, collection: List[Any] = []) -> None:
        self._collection = collection


    # возвращает объект итератора, по умолчанию мы возвращаем итератор с сортировкой по возрастанию.
    def __iter__(self) -> AlphabeticalOrderIterator:
        return AlphabeticalOrderIterator(self._collection)

    # возвращает объект итератора с сортировкой по убыванию
    def get_reverse_iterator(self) -> AlphabeticalOrderIterator:
        return AlphabeticalOrderIterator(self._collection, True)

    # добавляет в коллекцию новый элемент
    def add_item(self, item: Any):
        self._collection.append(item)


if __name__ == "__main__":
    # Клиентский код может знать или не знать о Конкретном Итераторе или классах Коллекций, 
    # в зависимости от уровня косвенности, который вы хотите сохранить в своей программе.

    # создание коллекции и добавление в нее элементов
    collection = WordsCollection()
    collection.add_item("First")
    collection.add_item("Second")
    collection.add_item("Third")

    # вывод списка
    print("\n".join(collection))

    print("\n")

    # вывод с реверсом
    print("\n".join(collection.get_reverse_iterator()), end="")




























