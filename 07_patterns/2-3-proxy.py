

# ================================================================================================================
# PROXY
# ================================================================================================================
# структурный паттерн 
# Паттерн подставляет вместо реальных объектов специальные объекты-заменители(по сути обертки для реального объекта)
# эти объекты перехватывают вызовы к оригинальному объекту, позволяя сделать что-то до или после передачи вызова оригинала(контроль доступа, кеширование, ленивая загрузка, логирование, изменение запроса и прочее)
# Заместитель сам управляет жизнью сервисного объекта он может сам его создать и сам уничтожить.
# Паттетн похож на декоратор - оба посроены на композиции и делегируют работу объекту, но обертывание декоратора контролируется клиентом, а заместитель управляет объектом сам. 


# ===== Популярные Варианты Применения
# Ленивая инициализация (виртуальный прокси)
# Когда есть тяжёлый объект, грузящий данные из файловой системы или базы данных.
# Паттерн позволяет создать объект тогда, когда он действительно понадобится.

# Защита доступа (защищающий прокси)
# Когда в программе есть разные типы пользователей, и вам хочется защищать объект от неавторизованного доступа. 
# Прокси может проверять доступ при каждом вызове и передавать выполнение служебному объекту, если доступ разрешён.

# Локальный запуск сервиса (удалённый прокси)
# Когда настоящий сервисный объект находится на удалённом сервере. В этом случае заместитель транслирует запросы клиента в вызовы по сети в протоколе, понятном удалённому сервису.

# Логирование запросов (логирующий прокси)
# Когда требуется хранить историю обращений к сервисному объекту. 
# Заместитель может сохранять историю обращения клиента к сервисному объекту.

# Кеширование объектов («умная» ссылка)
# Когда нужно кешировать результаты запросов клиентов и управлять их жизненным циклом. 
# Заместитель может подсчитывать количество ссылок на сервисный объект, которые были отданы клиенту и остаются активными. 


# ================================================================================================================
# Концептуальный пример
# ================================================================================================================
from abc import ABC, abstractmethod

# Интерфейс Субъекта объявляет общие операции как для Реального Субъекта и для Заместителя
class Subject(ABC):

    @abstractmethod
    def request(self) -> None:
        pass

# Реальный Субъект содержит некоторую базовую бизнес-логику.
class RealSubject(Subject):

    def request(self) -> None:
        print("RealSubject: Handling request.")


# Интерфейс Заместителя идентичен интерфейсу Субъекта(наследуется от него).
# Интерфейс Заместителя может быть наследован от Реального Субъекта(лучший вариант - будет работать быстрее)
# Объект заместителя при создании принимает реальный объект
class Proxy(Subject):

    def __init__(self, real_subject: RealSubject) -> None:
        self._real_subject = real_subject

    # заместитель выполняет свою логику(ленивую загрузку, кэширование, контроль доступа, логироване и тп)
    # затем выполняет одноименный метод реального объекта
    def request(self) -> None:
        if self.check_access():
            self._real_subject.request()
            self.log_access()

    # ниже идут 2 метода заместителя: проверка доступа и лог
    def check_access(self) -> bool:
        print("Proxy: Checking access prior to firing a real request.")
        return True

    def log_access(self) -> None:
        print("Proxy: Logging the time of request.", end="")



# Клиентский код может работать как с реальными объектами, так и заместителями через интерфейс Субъекта
def client_code(subject: Subject) -> None:
    subject.request()


if __name__ == "__main__":
    real_subject = RealSubject()                # создаем реальный объект
    client_code(real_subject)                   # RealSubject: Handling request

    print("")

    proxy = Proxy(real_subject)                 # создаем объект-заместителя(принимает реальный объект)
    client_code(proxy)                          
    # Proxy: Checking access prior to firing a real request.
    # RealSubject: Handling request
    # Proxy: Logging the time of request.









