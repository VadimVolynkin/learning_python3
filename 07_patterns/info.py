https://refactoring.guru/ru/design-patterns/creational-patterns
https://www.youtube.com/playlist?list=PLY7PmJJFH5nRcWGKbgl9N7txM5YLtela6
https://www.youtube.com/playlist?list=PLKWUX7aMnlEJzRvCXnwFEdk_WJDNjMDOo

http://pythonicway.com/education/basics/36-design-patterns-python
# ================================================================================================================
# ПОРОЖДАЮЩИЕ 
# ================================================================================================================

Создают классы и объекты.
Позволяют абстрагировать код создания от кода классов


# ================================================================================================================
# СТРУКТУРНЫЕ
# ================================================================================================================
отвечают за построение удобных в поддержке иерархий классов.




# ================================================================================================================
# ПОВЕДЕНЧЕСКИЕ
# ================================================================================================================
решают задачи эффективного и безопасного взаимодействия между объектами программы.
многие поведенческие паттерны базируются на том, чтобы превратить отдельные поведения в объекты.








Хорошие программы обычно структурированы в виде слоёв. Самый распространённый пример — слои пользовательского интерфейса и бизнес-логики. 





2. предпочитайте композицию наследованию класса.

================================================================



Для любой операции, объявляемой объектом, должны быть заданы: имя
операции, объекты, передаваемые в качестве параметров, и значение, возвра-
щаемое операцией. Эту триаду называют сигнатурой операции. Множество
сигнатур всех определенных для объекта операций называется интерфейсом
этого объекта. Интерфейс описывает все множество запросов, которые мож-
но отправить объекту. Любой запрос, сигнатура которого входит в интерфейс
объекта, может быть ему отправлен.


Ассоциирование запроса с объектом и одной из его операций во время выполнения называется динамическим связыванием. Динамическое связывание позволяет во время выполнения подставить вместо одного объекта другой, если он имеет идентичный интерфейс.


Тип представляет собой имя, используемое для обозначения конкретного
интерфейса.


Никакого способа получить информацию об объекте или заставить
его что-то сделать в обход интерфейса не существует. Интерфейс объекта
ничего не говорит о его реализации; разные объекты вправе реализовывать
сходные запросы совершенно по-разному.









Класс называется абстрактным, если его единственное назначение — опре-
делить общий интерфейс для всех своих подклассов. Абстрактный класс
делегирует реализацию всех или части своих операций подклассам, по-
этому у него не может быть экземпляров. Операции, объявленные, но не
реализованные в абстрактном классе, называются абстрактными. Класс,
не являющийся абстрактным, называется конкретным.










Класс объекта определяет реализацию объекта, то есть внутреннее состояние
и реализацию операций объекта.класс определяет операции, которые может выполнять объект, он также
определяет и его тип.

тип относится только к интер-
фейсу объекта — множеству запросов, на которые объект способен ответить.
У объекта может быть много типов, и объекты разных классов могут иметь
один и тот же тип.



В случае наследования
класса реализация объекта определяется в терминах реализации другого
объекта. Проще говоря, это механизм разделения кода и представления.
Напротив, наследование интерфейса (порождение подтипов) описывает,
когда один объект можно использовать вместо другого.

# ================================================================================================================
# НАСЛЕДОВАНИЕ
# ================================================================================================================
Наследование класса позволяет определить реализацию одного класса через другой. Повторное
использование за счет порождения подкласса называют еще повторным
использованием по принципу прозрачного ящика (white box reuse).



# ================================================================================================================
# КОМПОЗИЦИЯ
# ================================================================================================================
Композиция объектов — альтернатива наследованию класса. В этом случае
новая, более сложная функциональность получается путем объединения
или композиции объектов. Для композиции требуется, чтобы объединяемые
объекты имели четко определенные интерфейсы. Такой способ называют
повторным использованием по принципу черного ящика (blackbox reuse),
поскольку детали внутреннего устройства объектов остаются скрытыми.


# ================================================================================================================
# ПОЛИМОРФИЗМ
# ================================================================================================================



# ================================================================================================================
# MIXIN
# ================================================================================================================
Примесью (mixin class) называется класс, назначение которого — предоста-
вить дополнительный интерфейс или функциональность другим классам.не предполагает
непосредственного создания экземпляров.






















