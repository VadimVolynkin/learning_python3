# ================================================================================================================
# SET
# ================================================================================================================
# неупорядоченная уникальная последовательность(нет доступа по индексу)
# изменяемый тип, ключом словаря быть не может
# поддерживают сравнение
# не поддерживают сортировку
# вес - 48 байт

m = {1, 2, 3}                         
empty_set = set()                     # создание пустого множества
m2 = set([1,2,3])                     # преобразование списка в множество
m3 = set((3,2,1))                     # преобразование кортежа в множество
m2 == m3                              # True все элементы совпадают, порядок не важен

['__and__', '__class__', '__contains__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__iand__', '__init__', '__init_subclass__', '__ior__', '__isub__', '__iter__', '__ixor__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__or__', '__rand__', '__reduce__', '__reduce_ex__', '__repr__', '__ror__', '__rsub__', '__rxor__', '__setattr__', '__sizeof__', '__str__', '__sub__', '__subclasshook__', '__xor__', 'add', 'clear', 'copy', 'difference', 'difference_update', 'discard', 'intersection', 'intersection_update', 'isdisjoint', 'issubset', 'issuperset', 'pop', 'remove', 'symmetric_difference', 'symmetric_difference_update', 'union', 'update']

a = {1, 2, 3, 4, 5}
b = {1, 2, 6, 7, 8}

# a.add(100)                  # {1, 2, 3, 4, 5, 100} добавляет элемент
# a.сlear()                   # удалит все элементы
# a.remove(50)                # KeyError - нет такого элемента. Если есть - то удалит.
# a.discard(50)               # не будет вызывать ошибку, если элемента нет
# a.pop(1)                    # 1 удалит случайный элемент, который будет в памяти первым и вернет. Если пусто - KeyError.
# a.copy()                    # делает копию множества

# a.isdisjoint(b)             # False, все элементы b отсутствуют в a?.
# a.issubset(b)               # False, b подмножество a?(все элементы из a есть в b?)
# a.issuperset(b)             # False, b надмножество a?(все элементы из b есть в a?)

###### Объединение ===================================================================
res = a | b
res = a.union(b)
print(res)                            # {1, 2, 3, 4, 5, 6, 7, 8} объединяет все элементы из двух множеств

###### Добавление ====================================================================
res = a + b
res = a.update(b)                    
print(res)                            # a = {1, 2, 3, 4, 5, 6, 7, 8} добавляет новые элементы из b

###### Пересечение ===================================================================
a = {1, 2, 3, 4, 5}
b = {1, 2, 6, 7, 8}

res = a & b
res = a.intersection(b)              # {1, 2} создает новое множество с общими элементами двух разных множеств
print(res)                            # {1, 2} общие элементы для двух разных множеств
a.intersection_update(b)              # a = {1, 2} меняет a на общие элементы для двух разных множеств

###### Разность множеств =============================================================
res = a - b
res = a.difference(b)
print(res)                            # {3, 4, 5}  новое множество = элементы первого списка, которых нет во втором списке
a.difference_update(b)                # апдейт а

###### Симметрическая разность =======================================================
res = a ^ b
res = a.symmetric_difference(b)
print(res)                            # {3, 4, 5, 6, 7, 8} новое множество  = элементы, которых нет в обоих списках одновременно
a.symmetric_difference_update(b)      # апдейт а

# ================================================================================================================
# ГЕНЕРАТОРЫ МНОЖЕСТВ 
# ================================================================================================================
a = {i for i in [1, 2, 0, 1, 3, 2]}    # {0, 1, 2, 3}

# ================================================================================================================
# FROSENSET
# ================================================================================================================
# неизменяемые множества
# хешируется, может быть использован как ключ словаря

empty_frozenset = frozenset()          # frozenset()                можно создать пустое неизменяемое множество
fset = frozenset([1,2,3,4,5])          # frozenset({1, 2, 3, 4, 5}) создание множества из хешируемых объектов



