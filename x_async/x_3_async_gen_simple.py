# https://www.youtube.com/watch?v=zU0TxGyMUs4&list=PLlWXhlUMyooawilqK4lPXRvxtbYiw34S8&index=8

"""
# ===== Генераторы и Событийный цикл Карусель (Round Robin) Часть 2 ===================================================
Суть карусели - престановка первого элемента в конец очереди.

1. Создаем 2 генератора (или более) и помещаем их в очередь
2. Берем первый из очереди. Делаем его итерацию. Помещаем его в конец очереди.

Асинхронный код состоит из 2 условий:
1. Любая конструкция языка, позволяющая передавать выполнение потока: замыкания, генераторы, корутины...
2. Событийный цикл, который решает какой код будет выполняться в тот или иной момент.
"""
from time import sleep

def counter():
    """Генератор будет считать вызовы"""
    counter = 0
    while True:
        print(counter)             # будет печатать каждый вызов
        counter +=1
        yield                      # отдает поток управления в вызывающий код


def printer():
    """Генераор будет писать Bang 1 раз в 3 вызова"""
    counter = 0
    while True:
        if counter % 3 == 0:       # 1 раз в 3 вызова будет срабатывать
            print('Bang!')
        counter += 1
        yield                      # отдает поток управления в вызывающий код


def main():
    """ Событийный цикл Карусель(Round Robin)"""
    while True:
        g = queue.pop(0)           # берем из очереди первый генератор и удаляем его из очереди
        next(g)                    # делаем итерацию
        queue.append(g)            # добавляем его же в конец очереди
        sleep(0.5)                 # спим и переходим в цикле к следующему генератору в очереди...


if __name__ == '__main__':
    # создаем очередь
    queue = []

    # создаем 2 генератора и добавляем в очередь
    g1 = counter()
    queue.append(g1)
    g2 = printer()
    queue.append(g2)

    # запускаем бесконечный цикл
    main()











