# ================================================================================================================
# КЛАСС namedtuple()
# ================================================================================================================
# класс создает подкласс, который создает именованные кортежи с возможностью доступа к полям по имени вместо индекса
# экземпляры именованных кортежей не имеют словарей, поэтому легковесны и весят не более обычных кортежей.
# именованные кортежи особенно полезны для присвоения имен полей для csv или sqlite3
# кортежи имеют полезную строку документации с typename и field_names, а так же метод __repr__() для вывода содержимого кортежа в формате name=value.


import collections

ntuple = collections.namedtuple(typename, field_names, *, rename=False, defaults=None, module=None)
# вернет новый подкласс кортежа с именем typename
# подкласс может создавать объекты похожие на кортежи, которые имеют индексируемые и итерируемые поля, доступные для поиска по атрибутам. 
# typename - имя именованного кортежа
# field_names - последовательность строк, имена элементов кортежа, таких как ['x', 'y']
# rename - bool, авто-переименование повторяющихся имен элементов
# defaults=None - итерируемая последовательность, значения по умолчанию имен кортежа
# module=None - атрибут __module__ именованного кортежа

# ================================================================================================================
# ПРОСТОЙ ПРИМЕР РАБОТЫ
# ================================================================================================================
from collections import namedtuple

# создаем подкласс кортежа с именами полей x и y
Point = namedtuple('Point', ['x', 'y'])

# создаем экземпляр с 1 позиционным и 1 именованным параметром
p = Point(11, y=22)

# можно обращаться по индексу как к обычному кортежу
p[0] + p[1]
# 33

# можно обращаться по по названию
p.x + p.y
# 33

# распаковать как обычный кортеж
x, y = p
# (11, 22)

# человеко-читаемый вывод
__repr__()
# Point(x=11, y=22)

# есть getattr():
getattr(p, 'x')
# 11


# ================================================================================================================
# МЕТОДЫ
# ================================================================================================================
# наследуют методы кортежей
# именованные кортежи имеют 3 собственных дополнительных метода и 2 атрибута

# ===== NamedTuple._make(iterable)=================================================================
# создает новый экземпляр namedtuple() из последовательности или итерации iterable.

t = [11, 22]
Point._make(t)
# Point(x=11, y=22)

# ===== NamedTuple._asdict() ======================================================================
# вернет новый словарь dict, который отображает имена полей в соответствии с их значениями

p = Point(x=11, y=22)
p._asdict()
# {'x': 11, 'y': 22}

# ===== NamedTuple._replace(**kwargs) =============================================================
# вернет новый экземпляр именованного кортежа, заменив указанные поля новыми значениями:

p = Point(x=11, y=22)
p._replace(x=33)
# Point(x=33, y=22)

# ===== NamedTuple._fields =======================================================================
# Свойство вернет кортеж строк, перечисляющий имена полей. Полезно для самоанализа и для создания новых именованных типов кортежей из существующих именованных кортежей.

# просмотр имен полей
p._fields
# ('x', 'y')

# создание нового именованного кортежа на основе Pixel (созданного ранее) и Color
Color = namedtuple('Color', 'red green blue')
Pixel = namedtuple('Pixel', Point._fields + Color._fields)
Pixel(11, 22, 128, 255, 0)
# Pixel(x=11, y=22, red=128, green=255, blue=0)

# ===== NamedTuple._field_defaults ===============================================================
# Свойство вернет словарь, который сопоставляет имена полей со значениями по умолчанию.

Account = namedtuple('Account', ['type', 'balance'], defaults=[0])
Account._field_defaults
# {'balance': 0}
Account('premium')
# Account(type='premium', balance=0)


# ================================================================================================================
# ПРИМЕР1
# ================================================================================================================
from collections import namedtuple

Point = namedtuple('Point', ['x', 'y'])
d = {'x': 11, 'y': 22}
print(Point(**d))
# Point(x=11, y=22)


# ================================================================================================================
# ПРИМЕР2: работа с csv и sqlite3
# ================================================================================================================
from collections import namedtuple

EmployeeRecord = namedtuple('EmployeeRecord', 'name, age, title, department, paygrade')


import csv
for emp in map(EmployeeRecord._make, csv.reader(open("employees.csv", "rb"))):
    print(emp.name, emp.title)


import sqlite3
conn = sqlite3.connect('/companydata')
cursor = conn.cursor()
cursor.execute('SELECT name, age, title, department, paygrade FROM employees')
for emp in map(EmployeeRecord._make, cursor.fetchall()):
    print(emp.name, emp.title)