# ================================================================================================================
# Класс defaultdict() - Словарь со значениями по умолчанию
# ================================================================================================================
# Такой словарь может определять тип данных значения.
# возвращает словарь-подобный объект подкласса dict
# класс переопределяет 1 метод из dict и добавляет 1 атрибут экземпляра класса
# в отличии от dict по умолчанию вызывается функция, которая возвращает значение по умолчанию для новых значений
# Python 3.9+ добавлена ​​поддержка операторов слияния словарей (|) и обновления словарей (|=)

import collections

d = collections.defaultdict(default_factory=None)
# default_factory - тип данных или функция, которая возвращает значение по умолчанию для новых значений

# ================================================================================================================
# НОВЫЕ МЕТОДЫ И АТРИБУТЫ
# ================================================================================================================
# defaultdict() наследует методы из dict, здесь представлены только отличия 

__missing__(key):
# Если атрибут default_factory=None, то KeyError с ключом key в качестве аргумента.
# Если default_factory!=None, то метод __missing__() вызывается без аргументов и отдает значение для данного ключа по умолчанию, это значение вставляется в словарь для ключа key.
# Если default_factory вызывает исключение, это исключение распространяется без изменений.

# Метод __missing__() вызывается только методом __getitem__() класса dict(), если key не найден. Все, что он возвращает или поднимает, затем возвращается или вызывается снова методом __getitem__().


default_factory
# Этот атрибут используется методом __missing __(). 
# Инициализируется при создании экземпляра, неявно default_factory=None

# ================================================================================================================
# ПРИМЕР1: группировка кортежей в словарь списков
# ================================================================================================================
s = [('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)]

# новое значение в словаре будет объектом list
d = defaultdict(list)
for k, v in s:
    # если ключа еще нет в словаре - defaultdict создаст пустой список, добавит в него значение, добавит пару в словарь
    # если ключ есть - вернет список и добавит в него новое значение
    d[k].append(v)

# выведем данные словаря в виде отсортированного списка кортежей
sorted(d.items())
# [('blue', [2, 4]), ('red', [1]), ('yellow', [1, 3])]


# ================================================================================================================
# ПРИМЕР2: подстчет букв в строке
# ================================================================================================================
s = 'mississippi'
# функция int() возвращает 0
# можно использовать вместо int() функцию foo(value): return lambda: value. Так можно вернуть что угодно.
d = defaultdict(int)
for k in s:
    d[k] += 1

sorted(d.items())
# [('i', 4), ('m', 1), ('p', 2), ('s', 4)]


# ================================================================================================================
# ПРИМЕР3: словарь множеств
# ================================================================================================================
s = [('red', 1), ('blue', 2), ('red', 3), ('blue', 4), ('red', 1), ('blue', 4)]

d = defaultdict(set)
for k, v in s:
    d[k].add(v)

# на выходе ключи с множеством значений
sorted(d.items())
[('blue', {2, 4}), ('red', {1, 3})]