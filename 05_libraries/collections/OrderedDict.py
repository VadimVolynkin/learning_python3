# ================================================================================================================
# КЛАСС OrderedDict - Обеспечивает частые операции переупорядочения ключей словаря
# в Python 3.7+ словари dict тоже стали упорядоченными
# ================================================================================================================
import collections

collections.OrderedDict(items)
# items - список кортежей (key, value).
# возвращает экземпляр подкласса dict с методами для изменения порядка словаря.
# Алгоритмически OrderedDict() может обрабатывать частые операции переупорядочения лучше, чем dict. 
# Операция равенства для OrderedDict проверяет соответствие порядка ключей.
# OrderedDict имеет метод .move_to_end() для эффективного перемещения элемента в конечную точку.
# Python 3.9+ добавлена ​​поддержка операторов слияния словарей (|) и обновления словарей (|=).


# ================================================================================================================
# МЕТОДЫ OrderedDict
# ================================================================================================================

# ===== od.popitem(last=True) ================================================================
# Метод возвращает и удаляет пару (key, value). Пары возвращаются в порядке LIFO, если аргумент last=True или в порядке FIFO, если last=False.


# ===== od.move_to_end(key, last=True) =======================================================
# Метод перемещает существующий key в начало/конец упорядоченного словаря. Элемент перемещается в правый конец, если аргумент last=True (по умолчанию), или в начало, если last=False. KeyError, если ключ не существует.

d = OrderedDict.fromkeys('abcde')

# перемещает элем. в начало
d.move_to_end('b', last=False)
''.join(d.keys())
# 'bacde'


# ================================================================================================================
# ПРИМЕР1 
# ================================================================================================================
# создим вариант упорядоченного словаря, который запоминает последний порядок вставки ключей. 
# если новая запись перезаписывает существующую, исходная позиция вставки изменяется и перемещается в конец

class LastUpdatedOrderedDict(OrderedDict):

    def __setitem__(self, key, value):
        super().__setitem__(key, value)          # перезаписывает значение
        self.move_to_end(key)                    # перемещает ключ в конец


# ================================================================================================================
# ПРИМЕР2: реализация варианта functools.lru_cache()
# ================================================================================================================
class LRU(OrderedDict):

    def __init__(self, maxsize=128, /, *args, **kwds):
        self.maxsize = maxsize
        super().__init__(*args, **kwds)

    def __getitem__(self, key):
        value = super().__getitem__(key)
        self.move_to_end(key)
        return value

    def __setitem__(self, key, value):
        if key in self:
            self.move_to_end(key)
        super().__setitem__(key, value)
        if len(self) > self.maxsize:
            oldest = next(iter(self))
            del self[oldest]













